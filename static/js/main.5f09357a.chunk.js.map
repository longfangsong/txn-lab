{"version":3,"sources":["model/atomicEvent.ts","component/AtomicEventView/AtomicEventView.tsx","component/GroupEventView/GroupEventView.tsx","component/KeyValueDetailView/KeyValueDetailView.tsx","model/store.ts","component/Timeline/Timeline.tsx","model/event/startTxn.ts","model/event/prewrite/prewrite_primary.ts","model/event/prewrite/prewrite_secondary.ts","model/event/prewrite/prewrite.ts","model/mutation.ts","model/event/commit/commit_primary.ts","model/event/commit/commit_secondary.ts","model/event/commit/commit.ts","model/session.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["isAtomic","event","undefined","atomics","EventDetail","columns","title","dataIndex","key","render","text","dataSource","displayFields","map","it","name","pagination","hideOnSinglePage","showHeader","bordered","size","AtomicEventView","onMouseEnter","onMouseLeave","typename","content","className","style","left","timestamp","GroupEventView","events","endAt","index","startAt","width","LockInfo","lock","value","by_transaction","primary","KeyValueDetail","snapshot","LockFilled","color","data","Array","from","write_record","atTimestamp","m","_","filter","ts","Store","write","this","Map","has","set","get","result","keys","push","sort","TransactionLine","transaction","length","request","Timeline","session","useState","txnSelected","setTxnSelected","currentViewingTime","setCurrentViewingTime","element","useRef","store","applyOnStore","sub","handleMouseMove","e","elem","current","offset","clientX","offsetLeft","offsetWidth","transactions","opacity","transaction_id","ref","onMouseMove","zIndex","StartTxnRequest","toString","PrewritePrimary","setData","setLock","PrewriteSecondary","Prewrite","mutations","primary_lock_on_key","prewritePrimaryTimestamp","prewriteSecondariesTimestamps","prewritePrimary","prewriteSecondaries","maxAllocatedTimestamp","find","mutation","prewriteSecondaryTimestamp","Put","CommitPrimary","commit_at_timestamp","setWrite","CommitSecondary","Commit","commitPrimaryTimestamp","commitSecondariesTimestamps","commitPrimary","commitSecondaries","a","b","Session","values","App","margin","padding","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"kTAmBO,SAASA,EAASC,GACrB,YAAyCC,IAAjCD,EAAqBE,Q,wCCfjC,SAASC,EAAT,GAAuD,IAAjCH,EAAgC,EAAhCA,MACZI,EAAU,CAAC,CACbC,MAAO,OACPC,UAAW,OACXC,IAAK,OACLC,OAAQ,SAACC,GAAD,OAAkB,4BAAIA,MAC/B,CACCJ,MAAO,QACPC,UAAW,QACXC,IAAK,UAET,OAAQ,cAAC,IAAD,CACJH,QAASA,EACTM,WAAYV,EAAMW,cAAcC,KAAI,SAAAC,GAAE,kCAASA,GAAT,IAAaN,IAAKM,EAAGC,UAC3DC,WAAY,CAACC,kBAAkB,GAC/BC,YAAY,EACZC,UAAU,EACVC,KAAM,UAIP,SAASC,EAAT,GAIuJ,IAH1HpB,EAGyH,EAHzHA,MACAqB,EAEyH,EAFzHA,aACAC,EACyH,EADzHA,aAEhC,OACI,cAAC,IAAD,CAASjB,MAAOL,EAAMuB,SAAUC,QAASrB,EAAY,CAACH,UAAtD,SACI,qBAAKyB,UAAW,QAASC,MAAO,CAACC,KAAK,GAAD,OAAK3B,EAAM4B,UAAX,MAChCP,aAAcA,EACdC,aAAcA,M,OC9BxB,SAASO,EAAT,GAIsJ,IAH1HC,EAGyH,EAHzHA,OACAT,EAEyH,EAFzHA,aACAC,EACyH,EADzHA,aAE/B,OACI,qCACKQ,EAAO5B,QAAQU,KAAI,SAACZ,GAAD,OAAW,cAAC,EAAD,CAAiBA,MAAOA,EAEPqB,aAAcA,EACdC,aAAcA,GAFT,QAAUtB,EAAM4B,cAIpEE,EAAO5B,QAAQU,KAAI,SAACmB,EAAOC,GACxB,GAAc,IAAVA,EAAa,OAAO,6BACxB,IAAMC,EAAUH,EAAO5B,QAAQ8B,EAAQ,GACvC,OAAO,qBAAKP,UAAW,mBAEXC,MAAO,CACHC,KAAK,QAAD,OAAUM,EAAQL,UAAlB,YACJM,MAAM,QAAD,OAAUH,EAAMH,UAAYK,EAAQL,UAApC,aAETP,aAAcA,EACdC,aAAcA,GANT,QAAUW,EAAQL,iB,qBChBnD,SAASO,EAAT,GAA2C,IAAxBC,EAAuB,EAAvBA,KACThC,EAAU,CAAC,CACbC,MAAO,OACPC,UAAW,OACXC,IAAK,OACLC,OAAQ,SAACC,GAAD,OAAkB,4BAAIA,MAC/B,CACCJ,MAAO,QACPC,UAAW,QACXC,IAAK,UAET,OAAQ,cAAC,IAAD,CACJH,QAASA,EACTM,WAAY,CACR,CAACI,KAAM,iBAAkBuB,MAAOD,EAAKE,eAAgB/B,IAAK,kBAC1D,CAACO,KAAM,cAAeuB,MAAOD,EAAKG,QAAShC,IAAK,YAEpDQ,WAAY,CAACC,kBAAkB,GAC/BC,YAAY,EACZC,UAAU,EACVC,KAAM,UAIP,SAASqB,EAAT,GAA6D,IAApCC,EAAmC,EAAnCA,SACtBrC,EAAU,CAAC,CACbC,MAAO,MACPC,UAAW,MACXC,IAAK,OACN,CACCF,MAAO,OACPC,UAAW,OACXC,IAAK,QACN,CACCF,MAAO,OACPC,UAAW,OACXC,IAAK,OACLC,OAAQ,SAAC4B,GACL,OAAIA,EAEI,cAAC,IAAD,CAASZ,QAAS,cAACW,EAAD,CAAUC,KAAMA,IAAS/B,MAAM,cAAjD,SACI,cAACqC,EAAA,EAAD,CAAYhB,MAAO,CAACiB,MAAO,eAG5B,+BAGhB,CACCtC,MAAO,eACPC,UAAW,eACXC,IAAK,iBAEHqC,EAAOC,MAAMC,KAAKL,GACnB7B,KAAI,YAAwC,IAAD,mBAArCL,EAAqC,2BAA/BqC,EAA+B,KAAzBR,EAAyB,KAAnBW,EAAmB,KACxC,MAAO,CAACxC,IAAKA,EAAKqC,KAAMA,EAAMR,KAAMA,EAAMW,aAAY,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAcT,mBAE9E,OAAO,cAAC,IAAD,CACHlC,QAASA,EACTM,WAAYkC,EACZ7B,WAAY,CAACC,kBAAkB,GAC/BC,YAAY,EACZC,UAAU,EACVC,KAAM,U,4BC3DP,SAAS6B,EAAeC,EAA+BrB,GAC1D,QAAU3B,IAANgD,EAGJ,OAAOC,QAAQL,MAAMC,KAAKG,GAAGE,QAAO,mCAAEC,EAAF,iBAAaA,GAAMxB,MAAY,mCAAEwB,EAAF,iBAAaA,KAY7E,IAAMC,EAAb,WACI,aAAe,yBAORT,UAPO,OAQPR,UARO,OASPkB,WATO,EACVC,KAAKX,KAAO,IAAIY,IAChBD,KAAKnB,KAAO,IAAIoB,IAChBD,KAAKD,MAAQ,IAAIE,IAJzB,oDAYmB5B,EAAmBrB,EAAa8B,GACtCkB,KAAKX,KAAKa,IAAIlD,IACfgD,KAAKX,KAAKc,IAAInD,EAAK,IAAIiD,KAE3BD,KAAKX,KAAKe,IAAIpD,GAAMmD,IAAI9B,EAAWS,KAhB3C,8BAmBmBT,EAAmBrB,EAAa8B,GACtCkB,KAAKnB,KAAKqB,IAAIlD,IACfgD,KAAKnB,KAAKsB,IAAInD,EAAK,IAAIiD,KAE3BD,KAAKnB,KAAKuB,IAAIpD,GAAMmD,IAAI9B,EAAWS,KAvB3C,+BA0BoBT,EAAmBrB,EAAa8B,GACvCkB,KAAKD,MAAMG,IAAIlD,IAChBgD,KAAKD,MAAMI,IAAInD,EAAK,IAAIiD,KAE5BD,KAAKD,MAAMK,IAAIpD,GAAMmD,IAAI9B,EAAWS,KA9B5C,+BAiCoBT,GAA8B,IAAD,IACrCgC,EAAS,IAAIJ,IACbK,EAAOhB,MAAMC,KAAKS,KAAKX,KAAKiB,SAChC,EAAAA,GAAKC,KAAL,oBAAajB,MAAMC,KAAKS,KAAKnB,KAAKyB,WAClC,EAAAA,GAAKC,KAAL,oBAAajB,MAAMC,KAAKS,KAAKD,MAAMO,UACnCA,EAAOA,EAAKE,OACZF,EAAOX,aAAaW,GANqB,oBAOvBA,GAPuB,IAOzC,2BAAwB,CAAC,IAAdtD,EAAa,QAEd8B,EAAQW,EADCO,KAAKX,KAAKe,IAAIpD,GACOqB,IAAc,CAAC,EAAG,IAEhDQ,EAAOY,EADEO,KAAKnB,KAAKuB,IAAIpD,GACMqB,IAAc,CAAC,EAAG,MAE/C0B,EAAQN,EADEO,KAAKD,MAAMK,IAAIpD,GACMqB,IAAc,CAAC,EAAG,MACvDgC,EAAOF,IAAInD,EAAK,CAAC8B,EAAM,GAAID,EAAK,GAAIkB,EAAM,MAdL,8BAgBzC,OAAOM,MAjDf,KCbA,SAASI,EAAT,GAGsG,IAFzEC,EAEwE,EAFxEA,YACAvC,EACwE,EADxEA,MAEzB,OAAO,sBAAKA,MAAOA,EAAZ,UACH,qBAAKD,UAAW,iBAAkBC,MAAO,CACrCC,KAAK,GAAD,OAAKsC,EAAY,GAAGrC,UAApB,KACJM,MAAM,GAAD,OAAK+B,EAAYA,EAAYC,OAAS,GAAGtC,UAAYqC,EAAY,GAAGrC,UAApE,QAERqC,EAAYrD,KAAI,SAAAuD,GAAO,OAAI,qBAA6C1C,UAAW,aACnDC,MAAO,CAACC,KAAK,GAAD,OAAKwC,EAAQvC,UAAb,OADP,cAAgBuC,EAAQvC,iBAKvD,SAASwC,EAAT,GAAmF,IAAhEC,EAA+D,EAA/DA,QAAS3C,EAAsD,EAAtDA,MAAsD,EACvD4C,mBAAwB,MAD+B,mBACtFC,EADsF,KACzEC,EADyE,OAEzCF,mBAAS,GAFgC,mBAEtFG,EAFsF,KAElEC,EAFkE,KAGvFC,EAAUC,iBAAO,MACjBC,EAAS,WACX,IADiB,EACbA,EAAQ,IAAIxB,EADC,cAECgB,EAAQvC,QAFT,IAEjB,2BAAkC,CAAC,IAA1B9B,EAAyB,QAC9B,GAAID,EAASC,GACLA,EAAM4B,WAAa6C,GACnBzE,EAAM8E,aAAaD,OAEpB,CAAC,IAAD,gBACe7E,EAAME,SADrB,IACH,2BAAiC,CAAC,IAAvB6E,EAAsB,QACzBA,EAAInD,WAAa6C,GACjBM,EAAID,aAAaD,IAHtB,iCAPM,8BAejB,OAAOA,EAfI,GAiBXG,EAAkB9B,YAAW,SAAC+B,GAC9B,IAAIC,EAAOP,EAAQQ,QACfC,EAASH,EAAEI,QAAUH,EAAKI,WAC9BZ,EAAsBU,EAASF,EAAKK,YAAc,OACnD,IAAK,CAAC,UAAY,IAErB,OAAO,sBAAK9D,UAAW,mBAAoBC,MAAOA,EAA3C,UACH,qBAAKD,UAAW,kBAAhB,SAEQoB,MAAMC,KAAKuB,EAAQmB,cACd5E,KAAI,SAAAC,GAAE,OAAI,cAACmD,EAAD,CACiBC,YAAapD,EACba,MAAO,CAAC+D,QAAS5E,EAAG,GAAG6E,iBAAmBnB,EAAc,OAAS,OAF5D1D,EAAG,GAAG6E,qBAOnD,sBAAKjE,UAAW,WAAYkE,IAAKhB,EAASiB,YAAaZ,EAAvD,UACI,qBAAKvD,UAAW,UACf4C,EAAQvC,OAAOlB,KAAI,SAAAZ,GAAK,OAAID,EAASC,GAClC,cAAC,EAAD,CAAiBA,MAAOA,EAEPqB,aAAc,kBAAMmD,EAAexE,EAAM0F,iBACzCpE,aAAc,kBAAMkD,EAAe,QAF9B,aAAexE,EAAM4B,WAI3C,cAAC,EAAD,CAAgBE,OAAQ9B,EAERqB,aAAc,kBAAMmD,EAAexE,EAAM0F,iBACzCpE,aAAc,kBAAMkD,EAAe,QAF9B,YAAcxE,EAAM4B,cAK7C,qBAAKH,UAAW,SAAUC,MAAO,CAC7BC,KAAK,GAAD,OAAK8C,EAAL,KACJoB,QAAS,QAGjB,cAACrD,EAAD,CAAgBC,SAAUoC,EAAMpC,SAASgC,QC/E1C,IAAMqB,EAAb,WAEI,WAA4BJ,GAAyB,yBAAzBA,iBAAwB,KAD3CnE,SAAW,kBADxB,yDASiBsD,MATjB,gCAMQ,OAAOtB,KAAKmC,iBANpB,oCAaQ,MAAO,CACH,CAAC5E,KAAM,YAAauB,MAAOkB,KAAK3B,UAAUmE,iBAdtD,KCAaC,EAAb,WAEI,WACoBpE,EACA8D,EACAnF,EACA8B,GAAgB,yBAHhBT,YAGe,KAFf8D,iBAEe,KADfnF,MACe,KAAf8B,QAAe,KAL1Bd,SAAW,kBADxB,yDASiBsD,GACTA,EAAMoB,QAAQ1C,KAAKmC,eAAgBnC,KAAKhD,IAAKgD,KAAKlB,OAClDwC,EAAMqB,QAAQ3C,KAAKmC,eAAgBnC,KAAKhD,IAAK,CAAC+B,eAAgBiB,KAAKmC,eAAgBnD,QAASgB,KAAKhD,QAXzG,oCAeQ,MAAO,CACH,CAACO,KAAM,MAAOuB,MAAOkB,KAAKhD,KAC1B,CAACO,KAAM,QAASuB,MAAOkB,KAAKlB,YAjBxC,KCAa8D,EAAb,WAEI,WACoBvE,EACA8D,EACAnF,EACA8B,EACAE,GAAkB,yBAJlBX,YAIiB,KAHjB8D,iBAGiB,KAFjBnF,MAEiB,KADjB8B,QACiB,KAAjBE,UAAiB,KAN5BhB,SAAW,oBADxB,yDAUiBsD,GACTA,EAAMoB,QAAQ1C,KAAKmC,eAAgBnC,KAAKhD,IAAKgD,KAAKlB,OAClDwC,EAAMqB,QAAQ3C,KAAKmC,eAAgBnC,KAAKhD,IAAK,CAAC+B,eAAgBiB,KAAKmC,eAAgBnD,QAASgB,KAAKhB,YAZzG,oCAgBQ,MAAO,CACH,CAACzB,KAAM,MAAOuB,MAAOkB,KAAKhD,KAC1B,CAACO,KAAM,QAASuB,MAAOkB,KAAKlB,YAlBxC,KCIa+D,EAAb,WAEI,WACoBV,EACAW,EACAC,EACA1E,EAChB2E,EACAC,GACD,yBANiBd,iBAMlB,KALkBW,YAKlB,KAJkBC,sBAIlB,KAHkB1E,YAGlB,KAROL,SAAW,WAQlB,KAwCekF,qBAxCf,OAyCeC,yBAzCf,EACE,IAAIC,EAAwB/E,OACK3B,IAA7BsG,EACAhD,KAAKkD,gBAAkB,IAAIT,EACvBO,EACAb,EACAY,EACAD,EAAUO,MAAK,SAAA/F,GAAE,OAAIA,EAAGN,MAAQ+F,KAAsBjE,QAG1DsE,IACApD,KAAKkD,gBAAkB,IAAIT,EACvBW,EACAjB,EACAY,EACAD,EAAUO,MAAK,SAAA/F,GAAE,OAAIA,EAAGN,MAAQ+F,KAAsBjE,aAGxBpC,IAAlCuG,EACAjD,KAAKmD,oBAAsBxD,MAAMmD,EAAWG,GAA+B5F,KACvE,mCAAEiG,EAAF,KAAYC,EAAZ,YACI,IAAIX,EACAW,EACApB,EACAmB,EAAUtG,IACVsG,EAAUxE,MACViE,OAIZK,IACApD,KAAKmD,oBAAsBL,EACtBlD,QAAO,SAAAtC,GAAE,OAAIA,EAAGN,MAAQ+F,KACxB1F,KAAI,SAACiG,EAAU7E,GAAX,OACD,IAAImE,EAAkBQ,EAAwB3E,EAAO0D,EAAgBmB,EAAStG,IAC1EsG,EAASxE,MAAOiE,OA5CxC,yDAwDiBzB,MAxDjB,8BAqDQ,MAAM,CAAEtB,KAAMA,KAAKkD,iBAAnB,mBAAuClD,KAAKmD,wBArDpD,oCA4DQ,MAAO,CACH,CAAC5F,KAAM,UAAWuB,MAAOkB,KAAK+C,0BA7D1C,KCPaS,EACT,WAAmBxG,EAAoB8B,GAAgB,yBAApC9B,MAAmC,KAAf8B,SCE9B2E,EAAb,WAEI,WACoBtB,EACAuB,EACArF,EACArB,GAAc,yBAHdmF,iBAGa,KAFbuB,sBAEa,KADbrF,YACa,KAAbrB,MAAa,KALxBgB,SAAW,gBADxB,yDASiBsD,GACTA,EAAMqC,SAAS3D,KAAK0D,oBAAqB1D,KAAKhD,IAAK,CAAC+B,eAAgBiB,KAAKmC,iBACzEb,EAAMqB,QAAQ3C,KAAK0D,oBAAqB1D,KAAKhD,IAAK,QAX1D,oCAeQ,MAAO,CACH,CAACO,KAAM,MAAOuB,MAAOkB,KAAKhD,KAC1B,CAACO,KAAM,YAAauB,MAAOkB,KAAK0D,oBAAoBlB,iBAjBhE,KCAaoB,EAAb,WAEI,WACoBzB,EACAuB,EACArF,EACArB,GAAc,yBAHdmF,iBAGa,KAFbuB,sBAEa,KADbrF,YACa,KAAbrB,MAAa,KALxBgB,SAAW,kBADxB,yDASiBsD,GACTA,EAAMqC,SAAS3D,KAAK0D,oBAAqB1D,KAAKhD,IAAK,CAAC+B,eAAgBiB,KAAKmC,iBACzEb,EAAMqB,QAAQ3C,KAAK0D,oBAAqB1D,KAAKhD,IAAK,QAX1D,oCAeQ,MAAO,CACH,CAACO,KAAM,MAAOuB,MAAOkB,KAAKhD,KAC1B,CAACO,KAAM,YAAauB,MAAOkB,KAAK0D,oBAAoBlB,iBAjBhE,KCGaqB,EAAb,WAEI,WACoB1B,EACA7B,EACAyC,EACA1E,EAChByF,EACAC,GACD,yBANiB5B,iBAMlB,KALkB7B,OAKlB,KAJkByC,sBAIlB,KAHkB1E,YAGlB,KAROL,SAAW,SAQlB,KAyBegG,mBAzBf,OA0BeC,uBA1Bf,EACE,IAAIb,EAAwB/E,OACG3B,IAA3BoH,EACA9D,KAAKgE,cAAgB,IAAIP,EAActB,EAAgB9D,EAAWyF,EAAwBf,IAE1FK,IACApD,KAAKgE,cAAgB,IAAIP,EAActB,EAAgB9D,EAAW+E,EAAuBL,SAEzDrG,IAAhCqH,EACA/D,KAAKiE,kBAAoBtE,MAAMW,EAAMyD,GAA6B1G,KAC9D,mCAAEL,EAAF,KAAOuG,EAAP,YACI,IAAIK,EAAgBzB,EAAgBoB,EAA6BlF,EAAWrB,OAIpFoG,IACApD,KAAKiE,kBAAoB3D,EACpBV,QAAO,SAAAtC,GAAE,OAAIA,IAAOyF,KACpB1F,KAAI,SAACL,EAAKyB,GAAN,OACD,IAAImF,EAAgBzB,EAAgB9D,EAAW+E,EAAwB3E,EAAOzB,OAG1FgD,KAAKiE,kBAAkBzD,MAAK,SAAC0D,EAAGC,GAAJ,OAAUD,EAAE7F,UAAY8F,EAAE9F,aA/B9D,yDAyCiBiD,MAzCjB,8BAsCQ,MAAM,CAAEtB,KAAMA,KAAKgE,eAAnB,mBAAqChE,KAAKiE,sBAtClD,oCA6CQ,MAAO,CACH,CAAC1G,KAAM,cAAeuB,MAAOkB,KAAK+C,0BA9C9C,KCJaqB,EAAb,WACI,aAAkE,IAA/C7F,EAA8C,uDAAJ,GAAI,yBAA9CA,SADvB,yDAKQ,IADuD,EACnD8B,EAAS,IAAIJ,IADsC,cAEjCD,KAAKzB,QAF4B,IAEvD,2BAAmC,CAAC,IAAzBqC,EAAwB,QAC3BP,EAAOH,IAAIU,EAAQuB,gBACnB9B,EAAOD,IAAIQ,EAAQuB,gBAAiB5B,KAAKK,GAEzCP,EAAOF,IAAIS,EAAQuB,eAAgB,CAACvB,KANW,8BASvD,OAAOtB,MAAMC,KAAKc,EAAOgE,cAbjC,KC0BeC,EAnBC,WACZ,IAAIxD,EAAU,IAAIsD,EAalB,OAZAtD,EAAQvC,OAAOgC,KAAK,IAAIgC,EAAgB,KACxCzB,EAAQvC,OAAOgC,KAAK,IAAIsC,EAAS,GAAI,CACjC,IAAIW,EAAI,IAAK,QACb,IAAIA,EAAI,IAAK,SACd,IAAK,KACR1C,EAAQvC,OAAOgC,KAAK,IAAIsC,EAAS,GAAI,CACjC,IAAIW,EAAI,IAAK,QACb,IAAIA,EAAI,IAAK,SACd,IAAK,KACR1C,EAAQvC,OAAOgC,KAAK,IAAIsD,EAAO,GAAI,CAAC,IAAK,KAAM,IAAK,KAG7C,qBAAK3F,UAAU,MAAf,SACH,cAAC,EAAD,CAAU4C,QAASA,EAAS3C,MAAO,CAACoG,OAAQ,OAAQC,QAAS,aCVtDC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASjI,OACP,cAAC,IAAMkI,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5f09357a.chunk.js","sourcesContent":["import {Store} from \"./store\";\n\nexport interface AtomicEvent {\n    readonly typename: string,\n    readonly timestamp: number,\n    readonly transaction_id: number\n\n    // todo: figure out conflict\n    applyOnStore(store: Store): void;\n\n    readonly displayFields: Array<{ name: string, value: string }>\n}\n\nexport interface GroupEvent {\n    readonly atomics: Array<AtomicEvent>\n    readonly timestamp: number,\n    readonly transaction_id: number,\n}\n\nexport function isAtomic(event: GroupEvent | AtomicEvent): event is AtomicEvent {\n    return (event as GroupEvent).atomics === undefined;\n}","import \"./AtomicEventView.css\";\nimport {Popover, Table} from \"antd\";\nimport {AtomicEvent} from \"../../model/atomicEvent\";\nimport {MouseEventHandler} from \"react\";\n\nfunction EventDetail({event}: { event: AtomicEvent }) {\n    const columns = [{\n        title: 'Name',\n        dataIndex: 'name',\n        key: 'name',\n        render: (text: string) => <b>{text}</b>,\n    }, {\n        title: 'value',\n        dataIndex: 'value',\n        key: 'value',\n    }];\n    return (<Table\n        columns={columns}\n        dataSource={event.displayFields.map(it => ({...it, key: it.name}))}\n        pagination={{hideOnSinglePage: true}}\n        showHeader={false}\n        bordered={true}\n        size={\"small\"}\n    />)\n}\n\nexport function AtomicEventView({\n                                    event,\n                                    onMouseEnter,\n                                    onMouseLeave\n                                }: { event: AtomicEvent, onMouseEnter: MouseEventHandler<HTMLDivElement>, onMouseLeave: MouseEventHandler<HTMLDivElement> }) {\n    return (\n        <Popover title={event.typename} content={EventDetail({event})}>\n            <div className={\"event\"} style={{left: `${event.timestamp}%`}}\n                 onMouseEnter={onMouseEnter}\n                 onMouseLeave={onMouseLeave}\n            />\n        </Popover>\n    )\n}","import \"./GroupEventView.css\";\nimport {GroupEvent} from \"../../model/atomicEvent\";\nimport {AtomicEventView} from \"../AtomicEventView/AtomicEventView\";\nimport {MouseEventHandler} from \"react\";\n\nexport function GroupEventView({\n                                   events,\n                                   onMouseEnter,\n                                   onMouseLeave\n                               }: { events: GroupEvent, onMouseEnter: MouseEventHandler<HTMLDivElement>, onMouseLeave: MouseEventHandler<HTMLDivElement> }) {\n    return (\n        <>\n            {events.atomics.map((event) => <AtomicEventView event={event}\n                                                            key={\"atom-\" + event.timestamp}\n                                                            onMouseEnter={onMouseEnter}\n                                                            onMouseLeave={onMouseLeave}/>\n            )}\n            {events.atomics.map((endAt, index) => {\n                if (index === 0) return <></>;\n                const startAt = events.atomics[index - 1];\n                return <div className={\"event-group-link\"}\n                            key={\"line-\" + startAt.timestamp}\n                            style={{\n                                left: `calc(${startAt.timestamp}% + 9px)`,\n                                width: `calc(${endAt.timestamp - startAt.timestamp}% - 8px)`\n                            }}\n                            onMouseEnter={onMouseEnter}\n                            onMouseLeave={onMouseLeave}\n                />\n            })}\n        </>\n    )\n}","import {Popover, Table} from \"antd\";\nimport {SnapShot} from \"../../model/store\";\nimport {LockFilled} from \"@ant-design/icons\";\nimport {Lock} from \"../../model/lock\";\n\nfunction LockInfo({lock}: { lock: Lock }) {\n    const columns = [{\n        title: 'Name',\n        dataIndex: 'name',\n        key: 'name',\n        render: (text: string) => <b>{text}</b>,\n    }, {\n        title: 'value',\n        dataIndex: 'value',\n        key: 'value',\n    }];\n    return (<Table\n        columns={columns}\n        dataSource={[\n            {name: \"By Transaction\", value: lock.by_transaction, key: \"by_transaction\"},\n            {name: \"Primary Key\", value: lock.primary, key: \"primary\"},\n        ]}\n        pagination={{hideOnSinglePage: true}}\n        showHeader={false}\n        bordered={true}\n        size={\"small\"}\n    />)\n}\n\nexport function KeyValueDetail({snapshot}: { snapshot: SnapShot }) {\n    const columns = [{\n        title: 'Key',\n        dataIndex: 'key',\n        key: 'key',\n    }, {\n        title: 'data',\n        dataIndex: 'data',\n        key: 'data',\n    }, {\n        title: 'lock',\n        dataIndex: 'lock',\n        key: 'lock',\n        render: (lock: Lock | null) => {\n            if (lock) {\n                return (\n                    <Popover content={<LockInfo lock={lock}/>} title=\"Lock Detail\">\n                        <LockFilled style={{color: \"#2fb82f\"}}/>\n                    </Popover>)\n            } else {\n                return <></>\n            }\n        }\n    }, {\n        title: 'write_record',\n        dataIndex: 'write_record',\n        key: 'write_record',\n    }];\n    const data = Array.from(snapshot)\n        .map(([key, [data, lock, write_record]]) => {\n            return {key: key, data: data, lock: lock, write_record: write_record?.by_transaction}\n        });\n    return <Table\n        columns={columns}\n        dataSource={data}\n        pagination={{hideOnSinglePage: true}}\n        showHeader={true}\n        bordered={true}\n        size={\"small\"}\n    />\n}","import {Lock} from \"./lock\";\nimport {WriteRecord} from \"./writeRecord\";\nimport * as _ from \"lodash\";\n\nexport function latest<T>(m: Map<number, T>): [number, T] | undefined {\n    return _.maxBy(Array.from(m), ([ts, _]) => ts)\n}\n\nexport function atTimestamp<T>(m: Map<number, T> | undefined, timestamp: number): [number, T] | undefined {\n    if (m === undefined) {\n        return undefined;\n    }\n    return _.maxBy(Array.from(m).filter(([ts, _]) => ts <= timestamp), ([ts, _]) => ts)\n}\n\nexport function afterTimestamp<T>(m: Map<number, T>, timestamp: number): Map<number, T> {\n    return new Map(Array.from(m).filter(([ts, _]) => ts > timestamp))\n}\n\nexport function allNotNull<T>(m: Map<number, T | null>): Array<[number, T]> {\n    return Array.from(m).filter(([_, item]) => item !== null) as Array<[number, T]>;\n}\n\nexport type SnapShot = Map<string, [string, Lock | null, WriteRecord | null]>;\nexport class Store {\n    constructor() {\n        this.data = new Map();\n        this.lock = new Map();\n        this.write = new Map();\n    }\n\n    // key -> timestamp -> value\n    public data: Map<string, Map<number, string>>;\n    public lock: Map<string, Map<number, Lock | null>>;\n    public write: Map<string, Map<number, WriteRecord | null>>;\n\n    public setData(timestamp: number, key: string, value: string) {\n        if (!this.data.has(key)) {\n            this.data.set(key, new Map());\n        }\n        this.data.get(key)!.set(timestamp, value)\n    }\n\n    public setLock(timestamp: number, key: string, value: Lock | null) {\n        if (!this.lock.has(key)) {\n            this.lock.set(key, new Map());\n        }\n        this.lock.get(key)!.set(timestamp, value)\n    }\n\n    public setWrite(timestamp: number, key: string, value: WriteRecord | null) {\n        if (!this.write.has(key)) {\n            this.write.set(key, new Map());\n        }\n        this.write.get(key)!.set(timestamp, value)\n    }\n\n    public snapshot(timestamp: number): SnapShot {\n        let result = new Map();\n        let keys = Array.from(this.data.keys());\n        keys.push(...Array.from(this.lock.keys()));\n        keys.push(...Array.from(this.write.keys()));\n        keys = keys.sort();\n        keys = _.sortedUniq(keys);\n        for (const key of keys) {\n            let dataItem = this.data.get(key);\n            const value = atTimestamp(dataItem, timestamp) || [0, \"\"];\n            let lockItem = this.lock.get(key);\n            const lock = atTimestamp(lockItem, timestamp) || [0, null];\n            let writeItem = this.write.get(key);\n            const write = atTimestamp(writeItem, timestamp) || [0, null];\n            result.set(key, [value[1], lock[1], write[1]]);\n        }\n        return result;\n    }\n}","import \"./Timeline.css\"\nimport {AtomicEvent, GroupEvent, isAtomic} from \"../../model/atomicEvent\";\nimport {AtomicEventView} from \"../AtomicEventView/AtomicEventView\";\nimport {GroupEventView} from \"../GroupEventView/GroupEventView\";\nimport {Session} from \"../../model/session\";\nimport CSS from 'csstype';\nimport {useRef, useState} from \"react\";\nimport * as _ from \"lodash\";\nimport {KeyValueDetail} from \"../KeyValueDetailView/KeyValueDetailView\";\nimport {Store} from \"../../model/store\";\n\nfunction TransactionLine({\n                             transaction,\n                             style\n                         }: { transaction: Array<AtomicEvent | GroupEvent>, style: CSS.Properties }) {\n    return <div style={style}>\n        <div className={\"event-line-top\"} style={{\n            left: `${transaction[0].timestamp}%`,\n            width: `${transaction[transaction.length - 1].timestamp - transaction[0].timestamp}%`\n        }}/>\n        {transaction.map(request => <div key={\"event-line-\" + request.timestamp} className={\"event-line\"}\n                                         style={{left: `${request.timestamp}%`}}/>)}\n    </div>\n}\n\nexport default function Timeline({session, style}: { session: Session, style?: CSS.Properties }) {\n    const [txnSelected, setTxnSelected] = useState<number | null>(null);\n    const [currentViewingTime, setCurrentViewingTime] = useState(0);\n    const element = useRef(null);\n    const store = (() => {\n        let store = new Store();\n        for (let event of session.events) {\n            if (isAtomic(event)) {\n                if (event.timestamp <= currentViewingTime) {\n                    event.applyOnStore(store)\n                }\n            } else {\n                for (const sub of event.atomics) {\n                    if (sub.timestamp <= currentViewingTime) {\n                        sub.applyOnStore(store)\n                    }\n                }\n            }\n        }\n        return store;\n    })()\n    let handleMouseMove = _.throttle((e) => {\n        let elem = element.current as any as HTMLDivElement;\n        let offset = e.clientX - elem.offsetLeft;\n        setCurrentViewingTime(offset / elem.offsetWidth * 100)\n    }, 100, {'trailing': true});\n\n    return <div className={\"timeline-wrapper\"} style={style}>\n        <div className={\"transaction-bar\"}>\n            {\n                Array.from(session.transactions)\n                    .map(it => <TransactionLine key={it[0].transaction_id}\n                                                transaction={it}\n                                                style={{opacity: it[0].transaction_id === txnSelected ? '100%' : '5%'}}\n                        />\n                    )\n            }\n        </div>\n        <div className={\"timeline\"} ref={element} onMouseMove={handleMouseMove}>\n            <div className={\"rails\"}/>\n            {session.events.map(event => isAtomic(event) ?\n                <AtomicEventView event={event}\n                                 key={\"atomic-ev-\" + event.timestamp}\n                                 onMouseEnter={() => setTxnSelected(event.transaction_id)}\n                                 onMouseLeave={() => setTxnSelected(null)}\n                /> :\n                <GroupEventView events={event}\n                                key={\"group-ev-\" + event.timestamp}\n                                onMouseEnter={() => setTxnSelected(event.transaction_id)}\n                                onMouseLeave={() => setTxnSelected(null)}\n                />\n            )}\n            <div className={\"cursor\"} style={{\n                left: `${currentViewingTime}%`,\n                zIndex: -1\n            }}/>\n        </div>\n        <KeyValueDetail snapshot={store.snapshot(currentViewingTime)}/>\n    </div>\n}","import {AtomicEvent} from \"../atomicEvent\";\nimport {Store} from \"../store\";\n\nexport class StartTxnRequest implements AtomicEvent {\n    readonly typename = \"StartTxnRequest\";\n    constructor(public readonly transaction_id: number) {\n    }\n\n    get timestamp(): number {\n        return this.transaction_id\n    }\n\n    applyOnStore(store: Store): void {\n    }\n\n    get displayFields(): Array<{ name: string; value: string }> {\n        return [\n            {name: \"timestamp\", value: this.timestamp.toString()},\n        ];\n    }\n}","import {AtomicEvent} from \"../../atomicEvent\";\nimport {Store} from \"../../store\";\n\nexport class PrewritePrimary implements AtomicEvent {\n    readonly typename = \"PrewritePrimary\";\n    constructor(\n        public readonly timestamp: number,\n        public readonly transaction_id: number,\n        public readonly key: string,\n        public readonly value: string) {\n    }\n\n    applyOnStore(store: Store): void {\n        store.setData(this.transaction_id, this.key, this.value);\n        store.setLock(this.transaction_id, this.key, {by_transaction: this.transaction_id, primary: this.key});\n    }\n\n    get displayFields(): Array<{ name: string; value: string }> {\n        return [\n            {name: \"key\", value: this.key},\n            {name: \"value\", value: this.value},\n        ];\n    }\n}","import {AtomicEvent} from \"../../atomicEvent\";\nimport {Store} from \"../../store\";\n\nexport class PrewriteSecondary implements AtomicEvent {\n    readonly typename = \"PrewriteSecondary\";\n    constructor(\n        public readonly timestamp: number,\n        public readonly transaction_id: number,\n        public readonly key: string,\n        public readonly value: string,\n        public readonly primary: string) {\n    }\n\n    applyOnStore(store: Store): void {\n        store.setData(this.transaction_id, this.key, this.value);\n        store.setLock(this.transaction_id, this.key, {by_transaction: this.transaction_id, primary: this.primary});\n    }\n\n    get displayFields(): Array<{ name: string; value: string }> {\n        return [\n            {name: \"key\", value: this.key},\n            {name: \"value\", value: this.value},\n        ];\n    }\n}","import {AtomicEvent, GroupEvent} from \"../../atomicEvent\";\nimport {Mutation} from \"../../mutation\";\nimport {PrewritePrimary} from \"./prewrite_primary\";\nimport {PrewriteSecondary} from \"./prewrite_secondary\";\nimport * as _ from 'lodash'\nimport {Store} from \"../../store\";\n\nexport class Prewrite implements AtomicEvent, GroupEvent {\n    readonly typename = \"Prewrite\";\n    constructor(\n        public readonly transaction_id: number,\n        public readonly mutations: Array<Mutation>,\n        public readonly primary_lock_on_key: string,\n        public readonly timestamp: number,\n        prewritePrimaryTimestamp?: number,\n        prewriteSecondariesTimestamps?: Array<number>,\n    ) {\n        let maxAllocatedTimestamp = timestamp;\n        if (prewritePrimaryTimestamp !== undefined) {\n            this.prewritePrimary = new PrewritePrimary(\n                prewritePrimaryTimestamp,\n                transaction_id,\n                primary_lock_on_key,\n                mutations.find(it => it.key === primary_lock_on_key)!.value\n            );\n        } else {\n            maxAllocatedTimestamp++;\n            this.prewritePrimary = new PrewritePrimary(\n                maxAllocatedTimestamp,\n                transaction_id,\n                primary_lock_on_key,\n                mutations.find(it => it.key === primary_lock_on_key)!.value\n            );\n        }\n        if (prewriteSecondariesTimestamps !== undefined) {\n            this.prewriteSecondaries = _.zip(mutations, prewriteSecondariesTimestamps).map(\n                ([mutation, prewriteSecondaryTimestamp]) => (\n                    new PrewriteSecondary(\n                        prewriteSecondaryTimestamp!,\n                        transaction_id,\n                        mutation!.key,\n                        mutation!.value,\n                        primary_lock_on_key)\n                )\n            );\n        } else {\n            maxAllocatedTimestamp++;\n            this.prewriteSecondaries = mutations\n                .filter(it => it.key !== primary_lock_on_key)\n                .map((mutation, index) =>\n                    new PrewriteSecondary(maxAllocatedTimestamp + index, transaction_id, mutation.key,\n                        mutation.value, primary_lock_on_key)\n                );\n        }\n    }\n\n    private readonly prewritePrimary: PrewritePrimary;\n    private readonly prewriteSecondaries: Array<PrewriteSecondary>;\n\n    get atomics(): Array<AtomicEvent> {\n        return [this, this.prewritePrimary, ...this.prewriteSecondaries];\n    }\n\n    applyOnStore(store: Store): void {\n    }\n\n    get displayFields(): Array<{ name: string; value: string }> {\n        return [\n            {name: \"primary\", value: this.primary_lock_on_key}\n        ];\n    }\n}","export class Put {\n    constructor(public key: string, public value: string) {\n    }\n}\n\nexport class Del {\n    constructor(public key: string) {\n    }\n\n    get value() {\n        return \"\";\n    }\n}\n\nexport type Mutation = Put | Del;","import {AtomicEvent} from \"../../atomicEvent\";\nimport {Store} from \"../../store\";\n\nexport class CommitPrimary implements AtomicEvent {\n    readonly typename = \"CommitPrimary\";\n    constructor(\n        public readonly transaction_id: number,\n        public readonly commit_at_timestamp: number,\n        public readonly timestamp: number,\n        public readonly key: string) {\n    }\n\n    applyOnStore(store: Store): void {\n        store.setWrite(this.commit_at_timestamp, this.key, {by_transaction: this.transaction_id});\n        store.setLock(this.commit_at_timestamp, this.key, null);\n    }\n\n    get displayFields(): Array<{ name: string; value: string }> {\n        return [\n            {name: \"key\", value: this.key},\n            {name: \"commit_ts\", value: this.commit_at_timestamp.toString()},\n        ];\n    }\n}","import {AtomicEvent} from \"../../atomicEvent\";\nimport {Store} from \"../../store\";\n\nexport class CommitSecondary implements AtomicEvent {\n    readonly typename = \"CommitSecondary\";\n    constructor(\n        public readonly transaction_id: number,\n        public readonly commit_at_timestamp: number,\n        public readonly timestamp: number,\n        public readonly key: string) {\n    }\n\n    applyOnStore(store: Store): void {\n        store.setWrite(this.commit_at_timestamp, this.key, {by_transaction: this.transaction_id});\n        store.setLock(this.commit_at_timestamp, this.key, null);\n    }\n\n    get displayFields(): Array<{ name: string; value: string }> {\n        return [\n            {name: \"key\", value: this.key},\n            {name: \"commit_ts\", value: this.commit_at_timestamp.toString()},\n        ];\n    }\n}","import * as _ from 'lodash'\nimport {AtomicEvent, GroupEvent} from \"../../atomicEvent\";\nimport {CommitPrimary} from \"./commit_primary\";\nimport {CommitSecondary} from \"./commit_secondary\";\nimport {Store} from \"../../store\";\n\nexport class Commit implements AtomicEvent, GroupEvent {\n    readonly typename = \"Commit\";\n    constructor(\n        public readonly transaction_id: number,\n        public readonly keys: Array<string>,\n        public readonly primary_lock_on_key: string,\n        public readonly timestamp: number,\n        commitPrimaryTimestamp?: number,\n        commitSecondariesTimestamps?: Array<number>\n    ) {\n        let maxAllocatedTimestamp = timestamp;\n        if (commitPrimaryTimestamp !== undefined) {\n            this.commitPrimary = new CommitPrimary(transaction_id, timestamp, commitPrimaryTimestamp, primary_lock_on_key);\n        } else {\n            maxAllocatedTimestamp++;\n            this.commitPrimary = new CommitPrimary(transaction_id, timestamp, maxAllocatedTimestamp, primary_lock_on_key);\n        }\n        if (commitSecondariesTimestamps !== undefined) {\n            this.commitSecondaries = _.zip(keys, commitSecondariesTimestamps).map(\n                ([key, prewriteSecondaryTimestamp]) => (\n                    new CommitSecondary(transaction_id, prewriteSecondaryTimestamp!, timestamp, key!)\n                )\n            );\n        } else {\n            maxAllocatedTimestamp++;\n            this.commitSecondaries = keys\n                .filter(it => it !== primary_lock_on_key)\n                .map((key, index) =>\n                    new CommitSecondary(transaction_id, timestamp, maxAllocatedTimestamp + index, key!)\n                );\n        }\n        this.commitSecondaries.sort((a, b) => a.timestamp - b.timestamp);\n    }\n\n    private readonly commitPrimary: CommitPrimary;\n    private readonly commitSecondaries: Array<CommitSecondary>;\n\n    get atomics(): Array<AtomicEvent> {\n        return [this, this.commitPrimary, ...this.commitSecondaries];\n    }\n\n    applyOnStore(store: Store): void {\n    }\n\n    get displayFields(): Array<{ name: string; value: string }> {\n        return [\n            {name: \"primary key\", value: this.primary_lock_on_key}\n        ];\n    }\n}","import {AtomicEvent, GroupEvent} from \"./atomicEvent\";\n\nexport class Session {\n    constructor(public events: Array<AtomicEvent | GroupEvent> = []) {\n    }\n\n    get transactions(): Array<Array<AtomicEvent | GroupEvent>> {\n        let result = new Map();\n        for (const request of this.events) {\n            if (result.has(request.transaction_id)) {\n                result.get(request.transaction_id)!.push(request)\n            } else {\n                result.set(request.transaction_id, [request])\n            }\n        }\n        return Array.from(result.values())\n    }\n}","import React, {FC} from 'react';\nimport './App.css';\nimport Timeline from \"./component/Timeline/Timeline\";\nimport {StartTxnRequest} from \"./model/event/startTxn\";\nimport {Prewrite} from \"./model/event/prewrite/prewrite\";\nimport {Put} from \"./model/mutation\";\nimport {Commit} from \"./model/event/commit/commit\";\nimport {Session} from \"./model/session\";\n\nconst App: FC = () => {\n    let session = new Session();\n    session.events.push(new StartTxnRequest(10));\n    session.events.push(new Prewrite(10, [\n        new Put(\"a\", \"val1\"),\n        new Put(\"b\", \"val2\"),\n    ], \"a\", 15));\n    session.events.push(new Prewrite(21, [\n        new Put(\"c\", \"val3\"),\n        new Put(\"d\", \"val4\"),\n    ], \"c\", 20));\n    session.events.push(new Commit(10, [\"a\", \"b\"], \"a\", 50));\n    // store.push(new GetRequest(21, 60, \"a\"));\n\n    return <div className=\"App\">\n        <Timeline session={session} style={{margin: \"10px\", padding: \"10px\"}}/>\n    </div>\n};\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}